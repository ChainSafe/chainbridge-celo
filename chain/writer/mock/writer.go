// Copyright 2020 ChainSafe Systems
// SPDX-License-Identifier: LGPL-3.0-only

// Code generated by MockGen. DO NOT EDIT.
// Source: ./chain/writer/writer.go

// Package mock_writer is a generated GoMock package.
package mock_writer

import (
	context "context"
	ethereum "github.com/ethereum/go-ethereum"
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
	big "math/big"
	reflect "reflect"
)

// MockContractCaller is a mock of ContractCaller interface
type MockContractCaller struct {
	ctrl     *gomock.Controller
	recorder *MockContractCallerMockRecorder
}

// MockContractCallerMockRecorder is the mock recorder for MockContractCaller
type MockContractCallerMockRecorder struct {
	mock *MockContractCaller
}

// NewMockContractCaller creates a new mock instance
func NewMockContractCaller(ctrl *gomock.Controller) *MockContractCaller {
	mock := &MockContractCaller{ctrl: ctrl}
	mock.recorder = &MockContractCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContractCaller) EXPECT() *MockContractCallerMockRecorder {
	return m.recorder
}

// FilterLogs mocks base method
func (m *MockContractCaller) FilterLogs(ctx context.Context, q ethereum.FilterQuery) ([]types.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterLogs", ctx, q)
	ret0, _ := ret[0].([]types.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterLogs indicates an expected call of FilterLogs
func (mr *MockContractCallerMockRecorder) FilterLogs(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterLogs", reflect.TypeOf((*MockContractCaller)(nil).FilterLogs), ctx, q)
}

// LatestBlock mocks base method
func (m *MockContractCaller) LatestBlock() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestBlock")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestBlock indicates an expected call of LatestBlock
func (mr *MockContractCallerMockRecorder) LatestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestBlock", reflect.TypeOf((*MockContractCaller)(nil).LatestBlock))
}

// CallOpts mocks base method
func (m *MockContractCaller) CallOpts() *bind.CallOpts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallOpts")
	ret0, _ := ret[0].(*bind.CallOpts)
	return ret0
}

// CallOpts indicates an expected call of CallOpts
func (mr *MockContractCallerMockRecorder) CallOpts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallOpts", reflect.TypeOf((*MockContractCaller)(nil).CallOpts))
}

// Opts mocks base method
func (m *MockContractCaller) Opts() *bind.TransactOpts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Opts")
	ret0, _ := ret[0].(*bind.TransactOpts)
	return ret0
}

// Opts indicates an expected call of Opts
func (mr *MockContractCallerMockRecorder) Opts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Opts", reflect.TypeOf((*MockContractCaller)(nil).Opts))
}

// LockAndUpdateOpts mocks base method
func (m *MockContractCaller) LockAndUpdateOpts() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockAndUpdateOpts")
	ret0, _ := ret[0].(error)
	return ret0
}

// LockAndUpdateOpts indicates an expected call of LockAndUpdateOpts
func (mr *MockContractCallerMockRecorder) LockAndUpdateOpts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockAndUpdateOpts", reflect.TypeOf((*MockContractCaller)(nil).LockAndUpdateOpts))
}

// UnlockOpts mocks base method
func (m *MockContractCaller) UnlockOpts() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnlockOpts")
}

// UnlockOpts indicates an expected call of UnlockOpts
func (mr *MockContractCallerMockRecorder) UnlockOpts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockOpts", reflect.TypeOf((*MockContractCaller)(nil).UnlockOpts))
}

// WaitForBlock mocks base method
func (m *MockContractCaller) WaitForBlock(block *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForBlock", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForBlock indicates an expected call of WaitForBlock
func (mr *MockContractCallerMockRecorder) WaitForBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForBlock", reflect.TypeOf((*MockContractCaller)(nil).WaitForBlock), block)
}
