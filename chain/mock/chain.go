// Code generated by MockGen. DO NOT EDIT.
// Source: ./chain/chain.go

// Package mock_chain is a generated GoMock package.
package mock_chain

import (
	Bridge "github.com/ChainSafe/chainbridge-celo/bindings/Bridge"
	ERC20Handler "github.com/ChainSafe/chainbridge-celo/bindings/ERC20Handler"
	ERC721Handler "github.com/ChainSafe/chainbridge-celo/bindings/ERC721Handler"
	GenericHandler "github.com/ChainSafe/chainbridge-celo/bindings/GenericHandler"
	writer "github.com/ChainSafe/chainbridge-celo/chain/writer"
	gomock "github.com/golang/mock/gomock"
	big "math/big"
	reflect "reflect"
)

// MockBlockDB is a mock of BlockDB interface
type MockBlockDB struct {
	ctrl     *gomock.Controller
	recorder *MockBlockDBMockRecorder
}

// MockBlockDBMockRecorder is the mock recorder for MockBlockDB
type MockBlockDBMockRecorder struct {
	mock *MockBlockDB
}

// NewMockBlockDB creates a new mock instance
func NewMockBlockDB(ctrl *gomock.Controller) *MockBlockDB {
	mock := &MockBlockDB{ctrl: ctrl}
	mock.recorder = &MockBlockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockDB) EXPECT() *MockBlockDBMockRecorder {
	return m.recorder
}

// StoreBlock mocks base method
func (m *MockBlockDB) StoreBlock(arg0 *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBlock indicates an expected call of StoreBlock
func (mr *MockBlockDBMockRecorder) StoreBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBlock", reflect.TypeOf((*MockBlockDB)(nil).StoreBlock), arg0)
}

// TryLoadLatestBlock mocks base method
func (m *MockBlockDB) TryLoadLatestBlock() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLoadLatestBlock")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryLoadLatestBlock indicates an expected call of TryLoadLatestBlock
func (mr *MockBlockDBMockRecorder) TryLoadLatestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLoadLatestBlock", reflect.TypeOf((*MockBlockDB)(nil).TryLoadLatestBlock))
}

// MockListener is a mock of Listener interface
type MockListener struct {
	ctrl     *gomock.Controller
	recorder *MockListenerMockRecorder
}

// MockListenerMockRecorder is the mock recorder for MockListener
type MockListenerMockRecorder struct {
	mock *MockListener
}

// NewMockListener creates a new mock instance
func NewMockListener(ctrl *gomock.Controller) *MockListener {
	mock := &MockListener{ctrl: ctrl}
	mock.recorder = &MockListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockListener) EXPECT() *MockListenerMockRecorder {
	return m.recorder
}

// StartPollingBlocks mocks base method
func (m *MockListener) StartPollingBlocks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPollingBlocks")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartPollingBlocks indicates an expected call of StartPollingBlocks
func (mr *MockListenerMockRecorder) StartPollingBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPollingBlocks", reflect.TypeOf((*MockListener)(nil).StartPollingBlocks))
}

// SetContracts mocks base method
func (m *MockListener) SetContracts(bridge *Bridge.Bridge, erc20Handler *ERC20Handler.ERC20Handler, erc721Handler *ERC721Handler.ERC721Handler, genericHandler *GenericHandler.GenericHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContracts", bridge, erc20Handler, erc721Handler, genericHandler)
}

// SetContracts indicates an expected call of SetContracts
func (mr *MockListenerMockRecorder) SetContracts(bridge, erc20Handler, erc721Handler, genericHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContracts", reflect.TypeOf((*MockListener)(nil).SetContracts), bridge, erc20Handler, erc721Handler, genericHandler)
}

// MockWriter is a mock of Writer interface
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// SetBridge mocks base method
func (m *MockWriter) SetBridge(bridge writer.Bridger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBridge", bridge)
}

// SetBridge indicates an expected call of SetBridge
func (mr *MockWriterMockRecorder) SetBridge(bridge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBridge", reflect.TypeOf((*MockWriter)(nil).SetBridge), bridge)
}
