// Code generated by MockGen. DO NOT EDIT.
// Source: ./chain/listener/bindings.go

// Package mock_listener is a generated GoMock package.
package mock_listener

import (
	ERC20Handler "github.com/ChainSafe/chainbridge-celo/bindings/mptp/ERC20Handler"
	ERC721Handler "github.com/ChainSafe/chainbridge-celo/bindings/mptp/ERC721Handler"
	GenericHandler "github.com/ChainSafe/chainbridge-celo/bindings/mptp/GenericHandler"
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIBridge is a mock of IBridge interface
type MockIBridge struct {
	ctrl     *gomock.Controller
	recorder *MockIBridgeMockRecorder
}

// MockIBridgeMockRecorder is the mock recorder for MockIBridge
type MockIBridgeMockRecorder struct {
	mock *MockIBridge
}

// NewMockIBridge creates a new mock instance
func NewMockIBridge(ctrl *gomock.Controller) *MockIBridge {
	mock := &MockIBridge{ctrl: ctrl}
	mock.recorder = &MockIBridgeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIBridge) EXPECT() *MockIBridgeMockRecorder {
	return m.recorder
}

// ResourceIDToHandlerAddress mocks base method
func (m *MockIBridge) ResourceIDToHandlerAddress(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceIDToHandlerAddress", opts, arg0)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceIDToHandlerAddress indicates an expected call of ResourceIDToHandlerAddress
func (mr *MockIBridgeMockRecorder) ResourceIDToHandlerAddress(opts, arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceIDToHandlerAddress", reflect.TypeOf((*MockIBridge)(nil).ResourceIDToHandlerAddress), opts, arg0)
}

// MockIERC20Handler is a mock of IERC20Handler interface
type MockIERC20Handler struct {
	ctrl     *gomock.Controller
	recorder *MockIERC20HandlerMockRecorder
}

// MockIERC20HandlerMockRecorder is the mock recorder for MockIERC20Handler
type MockIERC20HandlerMockRecorder struct {
	mock *MockIERC20Handler
}

// NewMockIERC20Handler creates a new mock instance
func NewMockIERC20Handler(ctrl *gomock.Controller) *MockIERC20Handler {
	mock := &MockIERC20Handler{ctrl: ctrl}
	mock.recorder = &MockIERC20HandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIERC20Handler) EXPECT() *MockIERC20HandlerMockRecorder {
	return m.recorder
}

// GetDepositRecord mocks base method
func (m *MockIERC20Handler) GetDepositRecord(opts *bind.CallOpts, depositNonce uint64, destId uint8) (ERC20Handler.ERC20HandlerDepositRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepositRecord", opts, depositNonce, destId)
	ret0, _ := ret[0].(ERC20Handler.ERC20HandlerDepositRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositRecord indicates an expected call of GetDepositRecord
func (mr *MockIERC20HandlerMockRecorder) GetDepositRecord(opts, depositNonce, destId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositRecord", reflect.TypeOf((*MockIERC20Handler)(nil).GetDepositRecord), opts, depositNonce, destId)
}

// MockIERC721Handler is a mock of IERC721Handler interface
type MockIERC721Handler struct {
	ctrl     *gomock.Controller
	recorder *MockIERC721HandlerMockRecorder
}

// MockIERC721HandlerMockRecorder is the mock recorder for MockIERC721Handler
type MockIERC721HandlerMockRecorder struct {
	mock *MockIERC721Handler
}

// NewMockIERC721Handler creates a new mock instance
func NewMockIERC721Handler(ctrl *gomock.Controller) *MockIERC721Handler {
	mock := &MockIERC721Handler{ctrl: ctrl}
	mock.recorder = &MockIERC721HandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIERC721Handler) EXPECT() *MockIERC721HandlerMockRecorder {
	return m.recorder
}

// GetDepositRecord mocks base method
func (m *MockIERC721Handler) GetDepositRecord(opts *bind.CallOpts, depositNonce uint64, destId uint8) (ERC721Handler.ERC721HandlerDepositRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepositRecord", opts, depositNonce, destId)
	ret0, _ := ret[0].(ERC721Handler.ERC721HandlerDepositRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositRecord indicates an expected call of GetDepositRecord
func (mr *MockIERC721HandlerMockRecorder) GetDepositRecord(opts, depositNonce, destId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositRecord", reflect.TypeOf((*MockIERC721Handler)(nil).GetDepositRecord), opts, depositNonce, destId)
}

// MockIGenericHandler is a mock of IGenericHandler interface
type MockIGenericHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIGenericHandlerMockRecorder
}

// MockIGenericHandlerMockRecorder is the mock recorder for MockIGenericHandler
type MockIGenericHandlerMockRecorder struct {
	mock *MockIGenericHandler
}

// NewMockIGenericHandler creates a new mock instance
func NewMockIGenericHandler(ctrl *gomock.Controller) *MockIGenericHandler {
	mock := &MockIGenericHandler{ctrl: ctrl}
	mock.recorder = &MockIGenericHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIGenericHandler) EXPECT() *MockIGenericHandlerMockRecorder {
	return m.recorder
}

// GetDepositRecord mocks base method
func (m *MockIGenericHandler) GetDepositRecord(opts *bind.CallOpts, depositNonce uint64, destId uint8) (GenericHandler.GenericHandlerDepositRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepositRecord", opts, depositNonce, destId)
	ret0, _ := ret[0].(GenericHandler.GenericHandlerDepositRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositRecord indicates an expected call of GetDepositRecord
func (mr *MockIGenericHandlerMockRecorder) GetDepositRecord(opts, depositNonce, destId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositRecord", reflect.TypeOf((*MockIGenericHandler)(nil).GetDepositRecord), opts, depositNonce, destId)
}
